"use strict";(self.webpackChunkidetools_dev=self.webpackChunkidetools_dev||[]).push([[5894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"dynamic-proposals","metadata":{"permalink":"/blog/dynamic-proposals","source":"@site/blog/2024-09-06-dynamic-proposals.md","title":"Supporting dynamic code actions in VS Code Java","description":"I\'m definitely not the first developer to say that quick fix suggestions make my life ten times easier. With dynamic proposals for code actions, my life gets even easier.","date":"2024-09-06T00:00:00.000Z","tags":[{"label":"vscode","permalink":"/blog/tags/vscode"},{"label":"java","permalink":"/blog/tags/java"},{"label":"snippet","permalink":"/blog/tags/snippet"},{"label":"code actions","permalink":"/blog/tags/code-actions"}],"readingTime":1.9,"hasTruncateMarker":false,"authors":[{"name":"Hope Hadfield","title":"Intern @ Red Hat","url":"https://github.com/hopehadfield","imageURL":"https://github.com/hopehadfield.png","key":"hopehadfield"}],"frontMatter":{"slug":"dynamic-proposals","title":"Supporting dynamic code actions in VS Code Java","authors":["hopehadfield"],"tags":["vscode","java","snippet","code actions"]},"unlisted":false,"nextItem":{"title":"Dropping support of older Java releases in vscode-java","permalink":"/blog/java-1_8-compliance"}},"content":"I\'m definitely not the first developer to say that quick fix suggestions make my life ten times easier. With dynamic proposals for code actions, my life gets even easier.\\n\\nMany quick fixes have multiple suggestions for text replacement. In the Eclipse IDE, these are displayed in a dropdown selection menu. Take a look at the type mismatch quick fix below, for example:\\n\\n![Example of linked proposal in Eclipse](./assets/dynamic-proposals/linked-proposal-eclipse.gif)\\n\\nVery helpful, right? Now let\'s take a look at how VS Code handles the same quick fix:\\n\\n![Example of old proposal in VS Code](./assets/dynamic-proposals/old-vscode-proposal.gif)\\n\\nNo dropdown, no options, just the first item from Eclipse\'s list inserted statically. Definitely less helpful.\\n\\nWhy is this? Well, code actions in Eclipse support dropdown choices, as well as placeholders, which enable dynamic text insertion/replacement. Code actions in VS Code, on the other hand, do not. The closest we can get to simulating this behaviour in VS Code is by using snippets, which similarly have choices/placeholders. Unfortunately, we couldn\'t support snippet strings in code actions without violating the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) specification... until now!\\n\\nWith the introduction and support of SnippetTextEdit in [LSP](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#snippetTextEdit) and [VS Code](https://code.visualstudio.com/api/references/vscode-api#SnippetTextEdit), dynamic code actions will now be supported in the upcoming release of vscode-java 1.35.0! If you can\'t wait, they\'re also available now in pre-release.\\n\\nCheck out the relevant [PR](https://github.com/redhat-developer/vscode-java/pull/3730) in [vscode-java](https://github.com/redhat-developer/vscode-java) and its supporting [PR](https://github.com/eclipse-jdtls/eclipse.jdt.ls/pull/3229) in [JDT-LS](https://github.com/eclipse-jdtls/eclipse.jdt.ls).\\n\\n## The Point\\n\\nCode actions, which were once completely static, now prompt you to alter relevant sections of text and give you multiple suggestions for insertion and replacement.\\n\\n![Example of dynamic proposal in VS Code](./assets/dynamic-proposals/dynamic-proposal-vscode.gif)\\n\\nPretty cool.\\n\\n## Limitations\\n\\nThis improvement doesn\'t come without a few minor setbacks. \\n\\nFor code actions that propose new types, the import for the selected type cannot be automatically resolved. Instead, after applying the code action and selecting the new type from the dropdown, the user has to either manually import the type, apply the subsequent quick fix suggestion to import the type, or issue the \'Organize Imports\' command (`Shift` + `Alt` + `O`). \\n\\nAdditionally, any code action that involves multi-line text insertion will see additional indentation on all lines excluding the first one. You can see this happen in the above example. This is due to a [bug](https://github.com/microsoft/vscode/issues/63129) in VS Code that automatically adds indentation to snippet strings."},{"id":"java-1_8-compliance","metadata":{"permalink":"/blog/java-1_8-compliance","source":"@site/blog/2024-08-29-java-1_8-compliance.md","title":"Dropping support of older Java releases in vscode-java","description":"A percentage (~4%) of users trying out our latest release of vscode-java 1.33.0 were probably disappointed to note that we dropped support for Java versions prior to 1.8. This wasn\'t something we did intentionally but it happened in the JDT Core library that we rely on for much of our Java functionality. While losing existing functionality is frustrating, I\'ll go over why this change was necessary and how it will set up the JDT Core project, the Java language server (JDT-LS), and vscode-java for success in the longer term.","date":"2024-08-29T00:00:00.000Z","tags":[{"label":"vscode","permalink":"/blog/tags/vscode"},{"label":"java","permalink":"/blog/tags/java"},{"label":"lsp","permalink":"/blog/tags/lsp"}],"readingTime":1.495,"hasTruncateMarker":false,"authors":[{"name":"Roland Grunberg","title":"Principal Software Developer @ Red Hat","url":"https://github.com/rgrunber","imageURL":"https://github.com/rgrunber.png","key":"rgrunber"}],"frontMatter":{"slug":"java-1_8-compliance","title":"Dropping support of older Java releases in vscode-java","authors":["rgrunber"],"tags":["vscode","java","lsp"]},"unlisted":false,"prevItem":{"title":"Supporting dynamic code actions in VS Code Java","permalink":"/blog/dynamic-proposals"},"nextItem":{"title":"Meet LSP4IJ, a new LSP Client for JetBrains-based IDEs","permalink":"/blog/lsp4ij-announcement"}},"content":"A percentage (~4%) of users trying out our latest release of vscode-java [1.33.0](https://github.com/redhat-developer/vscode-java/releases/tag/v1.33.0) were probably disappointed to note that we dropped support for Java versions prior to 1.8. This wasn\'t something we did intentionally but it happened in the [JDT Core](https://github.com/eclipse-jdt/eclipse.jdt.core) library that we rely on for much of our Java functionality. While losing existing functionality is frustrating, I\'ll go over why this change was necessary and how it will set up the JDT Core project, the Java language server ([JDT-LS](https://github.com/eclipse-jdtls/eclipse.jdt.ls)), and [vscode-java](https://github.com/redhat-developer/vscode-java) for success in the longer term.\\n\\n\\n### There\'s a JEP for that\\n\\n[JEP-182](https://openjdk.org/jeps/182) already defines a process for this exact thing. Although the policy would have to change to take into account the 6-month release cadence, it\'s clear that a move towards supporting fewer older releases is desired.\\n\\nAs of now, `javac` from the OpenJDK 22 developments tools no longer support a pre-1.8 source/target/release flag :\\n\\n```\\n$ javac --help\\n  ...\\n  ...\\n  --release <release>\\n        Compile for the specified Java SE release.\\n        Supported releases:\\n            8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22\\n  ...\\n  ...\\n```\\n\\n### Maintenance burden\\n\\nGoing through the discussion ( https://github.com/eclipse-jdt/eclipse.jdt.core/discussions/820 ) in JDT Core to drop the support, it\'s clear there\'s a cost to supporting the older versions. It also affects the time it takes to implement new features that must deal with the added complexity from those older versions. Simplifying the codebase will translate into more features, implemented more quickly and an easier maintenance.\\n\\n\\n### Perspective\\n\\nSo where does that leave affected users ? They could continue to stay on vscode-java [1.32.0](https://github.com/redhat-developer/vscode-java/releases/tag/v1.32.0), until they update their project to Java 1.8 or above. It\'s definitely not ideal for those depending on older Java versions but the newer features, and improvements should certainly make up for it."},{"id":"lsp4ij-announcement","metadata":{"permalink":"/blog/lsp4ij-announcement","source":"@site/blog/2024-06-20-lsp4ij-announcement.md","title":"Meet LSP4IJ, a new LSP Client for JetBrains-based IDEs","description":"LSP4IJ is a new, free and open-source Language Server Protocol (LSP) client for JetBrains-based IDEs, compatible with both community and enterprise flavors.","date":"2024-06-20T00:00:00.000Z","tags":[{"label":"lsp","permalink":"/blog/tags/lsp"},{"label":"intellij","permalink":"/blog/tags/intellij"},{"label":"lsp4ij","permalink":"/blog/tags/lsp-4-ij"}],"readingTime":9.55,"hasTruncateMarker":false,"authors":[{"name":"Angelo Zerr","title":"Principal Software Engineer @ Red Hat","url":"https://github.com/angelozerr","imageURL":"https://github.com/angelozerr.png","key":"angelozerr"},{"name":"Fred Bricon","title":"Principal Software Engineer @ Red Hat","url":"https://github.com/fbricon","imageURL":"https://github.com/fbricon.png","key":"fbricon"}],"frontMatter":{"slug":"lsp4ij-announcement","title":"Meet LSP4IJ, a new LSP Client for JetBrains-based IDEs","authors":["angelozerr","fbricon"],"tags":["lsp","intellij","lsp4ij"]},"unlisted":false,"prevItem":{"title":"Dropping support of older Java releases in vscode-java","permalink":"/blog/java-1_8-compliance"},"nextItem":{"title":"Create a Test Kubernetes Cluster With an Unprivileged User","permalink":"/blog/k8s-create-unprivileged-user"}},"content":"[LSP4IJ](https://plugins.jetbrains.com/plugin/23257-lsp4ij) is a new, free and open-source Language Server Protocol (LSP) client for JetBrains-based IDEs, compatible with both **community** and enterprise flavors.\\n\\nIt provides outstanding features such as:\\n- The ability to [configure LSP servers without developing a new plug-in](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserDefinedLanguageServer.md) (restricted to stdio-based connections for the moment).\\n- A [set of API allowing third-party adopters to contribute LSP extensions](https://github.com/redhat-developer/lsp4ij/blob/main/docs/DeveloperGuide.md) to the JetBrains ecosystem\\n- a [console view](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserGuide.md#lsp-console), allowing users to monitor and troubleshoot the communication between the IDE and the LSP servers.\\n\\nThe client already supports a significant amount of [features](https://github.com/redhat-developer/lsp4ij/blob/main/docs/LSPSupport.md) from the LSP 3.17 specification, and more are on their way.\\n\\n## Why LSP4IJ?\\n\\nThe Devtools team at Red Hat has been working on free and open-source language servers for *many* years. We have offered LSP implementations for [Java](https://github.com/eclipse/eclipse.jdt.ls/), [YAML](https://github.com/redhat-developer/yaml-language-server), [XML](https://github.com/eclipse/lemminx), [MicroProfile](https://github.com/eclipse/lsp4mp), [Quarkus](https://github.com/redhat-developer/quarkus-ls) and [Qute](https://github.com/redhat-developer/quarkus-ls/tree/master/qute.ls), that were integrated into Visual Studio Code via several extensions. Some of those language servers have also been integrated into Eclipse IDE.\\n\\nBy 2019, JetBrains already provided some [Quarkus](https://quarkus.io/) support in IntelliJ IDEA Ultimate to their paid customers. But when Red Hat wanted to bring the same awesome [Quarkus tools](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-quarkus) VS Code already had, to the wider IntelliJ IDEA Community, an LSP client for IntelliJ was needed.\\n\\nAt that time, we evaluated [Ballerina\'s lsp4intellij library](https://github.com/ballerina-platform/lsp4intellij), which provides advanced LSP support but has the following limitations:\\n * Quarkus / Qute language servers have a complicated mechanism, delegating parts of the work to the IDE\'s Java support (JDT for Eclipse and Psi for IntelliJ), to avoid parsing Java classes twice (once by the language server, another the built-in Java support). We encountered numerous freezes.\\n * Ballerina implements certain LSP features without reusing IntelliJ built-in extension points (ex: hover, go to declaration)\\n * Tracing server status (starting, started, stopping, stopped) is difficult, which makes server startup issues hard to troubleshoot.\\n * Ballerina features are mostly based on a Timeout system, which stops LSP requests after a defined time.\\n\\nTo integrate our Quarkus and Qute language servers, the LSP support in IntelliJ needed to:\\n\\n * never freeze, even when the language server cannot be started.\\n * not rely on a timeout system, but instead properly manage LSP request cancellations (when the file is modified for example)\\n * provide a UI allowing easy tracking of the state of the language servers\\n * provide an LSP console that displays LSP traces and server logs.\\n\\nFor these reasons, we developed the LSP support we needed directly within the [`Quarkus Tools for IntelliJ`](https://github.com/redhat-developer/intellij-quarkus/) plugin. It actually started as a port of the [`Eclipse LSP4E`](https://github.com/eclipse/lsp4e) project. It took us several years, but we ended up with an LSP support that was mature and efficient.\\n\\nIn 2023, JetBrains finally decided to [start providing some LSP support](https://blog.jetbrains.com/platform/2023/07/lsp-for-plugin-developers/), but to only make it available in their commercial products, which was a not a good fit for us as we couldn\'t use it for `Quarkus Tools`. It was also lacking some features we really, really, liked in our LSP client, notably the LSP Consoles view.\\n\\nSeeing our own LSP support held up pretty well for Quarkus and Qute, we decided to extract it into its own standalone project, to provide generic LSP support, for all JetBrains products, notably the community ones. Hence LSP4IJ was born.\\n\\n## LSP support overview\\n\\n### LSP features\\n\\nLSP4IJ implements basic LSP features like `completion`, `validation`, `hover`, `go to definition`, but also more advanced ones, such as `codelens`, `inlay hints`, `quickfixes`, `rename`, `signature help` and others. \\n\\nHere\'s a quick example showcasing the [`gopls`](https://pkg.go.dev/golang.org/x/tools/gopls) language server in action:\\n\\n![Go Demo](./assets/lsp4ij-announcement/GoplsDemo.gif)\\n\\nThe [LSP Support](https://github.com/redhat-developer/lsp4ij/blob/main/docs/LSPSupport.md) page provides a complete overview of what LSP4IJ supports and details how it leverages specific IntelliJ extension points. While most features work out-of-the-box, a few [cases](https://github.com/redhat-developer/lsp4ij/blob/main/docs/DeveloperGuide.md#special-cases) require special configuration.\\n\\n#### Cancellation Support\\n\\nIn order to avoid using timeouts (that might still freeze the IDE), LSP4IJ implements [Cancellation Support](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#cancelRequest) to stop LSP requests when the file changes or when the IDE indicates the some requests (e.g. completion) are no longer relevant.\\n\\n### LSP consoles view\\n\\nAlthough not often useful to users, the [LSP consoles view](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserGuide.md#lsp-console) is extremely valuable when one needs to troubleshoot issues with the language servers. All servers can be configured to log traces, as simple or verbose messages. This console view is similar to Visual Studio Code\'s Output view, only more convenient, as message contents are collapsible:\\n\\n![LSP console](assets/lsp4ij-announcement/LSPConsole.png)\\n\\n## Installation\\n\\nLSP4IJ requires at least Java 17 and IntelliJ-based IDEs 2023.2 at the moment.\\n\\nThe LSP4IJ plugin is available in the stable channel of the [JetBrains Plugin Repository](https://plugins.jetbrains.com/plugin/23257-lsp4ij).\\n\\n## Quickly get started with LSP4IJ\\n\\nIf you want to *quickly test your language server with LSP4IJ without having to develop a plugin* or *if you\'re unfamiliar with IntelliJ plugin development*, LSP4IJ offers the possibility of integrating any language server (**only stdio mode is supported at the moment**) with [simple settings](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserDefinedLanguageServer.md) where you only need to define:\\n\\n * the language server `launch command`\\n * the `mapping` between the `language server` and the `files` targeted by the language server\\n\\n### Example: Adding TypeScript support\\n\\nFree/community IntelliJ-based IDEs only provide basic support for `TypeScript` in the form of syntax highlighting. In this section, we\'ll explain step-by-step how to integrate the [TypeScript language server](https://github.com/typescript-language-server/typescript-language-server) into your IntelliJ IDE, without having to develop anything, and immediately benefit from `TypeScript`, `React` and `JavaScript` support (completion, validation, quickfixes, codelens, etc):\\n\\n![TypeScriptServerDemo](assets/lsp4ij-announcement/TypeScriptServerDemo.gif)\\n\\n#### Step 1: Install the language server\\n\\nThis step describes how to install the language server. In our case, `typescript-language-server` is `Node.js` application and thus requires the `Node.js` runtime to run.\\n\\nYou will need to:\\n \\n* [Install `Node.js`](https://nodejs.org/en/download)\\n* [Install `typescript-language-server`](https://github.com/typescript-language-server/typescript-language-server?tab=readme-ov-file#installing). The simplest way is to open a terminal and execute the following command:\\n\\n> npm install -g typescript-language-server typescript\\n\\nIt will install:\\n\\n* [TypeScript language server](https://github.com/typescript-language-server/typescript-language-server): this project delegates the LSP operations (completion, diagnostics, etc) to the `tsserver` from [TypeScript](https://github.com/microsoft/TypeScript) which doesn\'t support LSP itself.\\n* [TypeScript](https://github.com/microsoft/TypeScript) which includes `tsserver`.\\n* As the command will add `typescript-language-server` to your OS PATH, you will probably have to close and reopen your IDE for the command to be accessible by LSP4IJ. \\n\\n#### Step 2: Create a language server in LSP4IJ\\n\\nIn order to create a new [User-defined language server](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserDefinedLanguageServer.md), you need to open the `New Language Server` dialog, either:\\n\\n * from the menu on the right of the LSP console:\\n\\n![New Language Server From Console](./assets/lsp4ij-announcement/NewLanguageServerFromConsole.png)\\n\\n* or with the `[+]` on the top of the language server settings:\\n\\n![New Language Server From Settings](./assets/lsp4ij-announcement/NewLanguageServerFromSettings.png)\\n\\nOnce you clicked on either of them, the dialog will appear:\\n\\n![New Language Server Dialog](./assets/lsp4ij-announcement/NewLanguageServerDialogEmpty.png)\\n\\nTo quickly configure TypeScript support, you could use the [TypeScript template](https://github.com/redhat-developer/lsp4ij/blob/main/docs/user-defined-ls/typescript-language-server.md) which will pre-fill all fields (command and mappings), but in order to better understand the process, let\'s do that manually:\\n\\n##### Define launch command\\n\\nIn the `Server` tab, set:\\n\\n * `Name` as `TypeScript Language Server`.\\n * `Command` as `typescript-language-server --stdio`\\n\\n![New Language Server Dialog with TypeScript](./assets/lsp4ij-announcement/TypeScriptServerDialog.png)\\n\\nNote that you can use [macros in your commands](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserDefinedLanguageServer.md#macro-syntax), to make them more portable, should you choose to [export you server](#Export-server).\\n\\n##### Define mappings\\n\\nIn the `Mappings > File name patterns` tab, associate `*.ts`, `*.tsx`, `*.jsx` files to the language server as shown below :\\n\\n| File Name Pattern |    Language Id  |\\n|-------------------|-----------------|\\n| *.jsx             | javascriptreact |\\n| *.ts              | typescript      |\\n| *.tsx             | typescriptreact |\\n\\n![File name patterns](./assets/lsp4ij-announcement/TypeScriptServerDialog_FileNamePatterns.png)\\n\\n\\nThe value in the `Language Id` column must be one of the language identifiers defined in the [LSP specification](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentItem).\\n\\n##### Define configuration\\n\\nBy default, `codelens` and `inlayhint` are not available in the TypeScript Language Server, you can enable them by filling the `Configuration` tab with the following JSON settings:\\n\\n```json\\n{\\n  \\"typescript\\": {\\n    \\"inlayHints\\": {\\n      \\"includeInlayEnumMemberValueHints\\": true,\\n      \\"includeInlayFunctionLikeReturnTypeHints\\": true,\\n      \\"includeInlayFunctionParameterTypeHints\\": true,\\n      \\"includeInlayParameterNameHints\\": \\"all\\",\\n      \\"includeInlayParameterNameHintsWhenArgumentMatchesName\\": true,\\n      \\"includeInlayPropertyDeclarationTypeHints\\": true,\\n      \\"includeInlayVariableTypeHints\\": true,\\n      \\"includeInlayVariableTypeHintsWhenTypeMatchesName\\": true\\n    },\\n    \\"implementationsCodeLens\\": {\\n      \\"enabled\\": true\\n    },\\n    \\"referencesCodeLens\\": {\\n      \\"enabled\\": true,\\n      \\"showOnAllFunctions\\": true\\n    }\\n  }\\n}\\n```\\n![TypeScript Language Server configuration page](./assets/lsp4ij-announcement/ts-ls-config.png)\\n\\nClick the `OK` button, and you should see the `TypeScript Language Server` in the `Language Servers` view:\\n\\n![TypeScript Language Server in the console view](./assets/lsp4ij-announcement/ts-ls-traces.png)\\n\\nCreate a `ts` file and open it. The `TypeScript Language Server` should start and you should now be able to use TypeScript support with completion, hover, linting...\\n\\n### Using a Template\\n\\nLSP4IJ provides [a few templates](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserDefinedLanguageServer.md#using-template) for various language servers. You can select the [TypeScript Language Server](https://github.com/redhat-developer/lsp4ij/blob/main/docs/user-defined-ls/typescript-language-server.md) template which will pre-fill all fields previously described (server name, command and mappings).\\n\\n\\n### Export server\\n\\nIf you want to share your language server settings, you can [export it](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserDefinedLanguageServer.md#exporting-templates) to generate a zip file, that, once shared and unzipped to a directory, can be [imported](https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserDefinedLanguageServer.md#custom-template).\\n\\n## How to integrate your language server in an IntelliJ plugin.\\n\\nManually defining a language server via settings allows you to add a language server into IntelliJ in a few minutes, but if you need to provide better integration with the IDE, embedding the language server definition in an IntelliJ plugin will be a better solution:\\n\\n * it is possible to embed the language server and/or provide a mechanism to download/update the language server, etc. make it easier for users to get started.\\n * advanced language servers require implementing specific client-side commands, which is only possible through the development of an IntelliJ plugin.\\n \\nThe [Developer Guide](https://github.com/redhat-developer/lsp4ij/blob/main/docs/DeveloperGuide.md)  provides step-by-step instructions for contributing an LSP language server in your IntelliJ plugin.\\n\\nThe following example shows how to integrate the `TypeScript Language Server` in an IntelliJ plugin. In your plugin.xml, you would declare the server like this:\\n\\n```xml\\n<extensions defaultExtensionNs=\\"com.redhat.devtools.lsp4ij\\">\\n    <server id=\\"typeScriptLanguageServerId\\"\\n            name=\\"TypeScript Language Server\\"\\n            factoryClass=\\"com.yourplugin.lsp.TypeScriptLanguageServerFactory\\">\\n        <description><![CDATA[\\n        Some description written in HTML, that will be displayed in the LSP consoles view and Language Servers settings.\\n        ]]>\\n        </description>\\n    </server>\\n</extensions>\\n```\\n\\nand mappings like this by using [File name pattern mapping](https://github.com/redhat-developer/lsp4ij/blob/main/docs/DeveloperGuide.md#file-name-pattern-mapping):\\n\\n```xml\\n<extensions defaultExtensionNs=\\"com.redhat.devtools.lsp4ij\\">\\n\\n    <fileNamePatternMapping patterns=\\"*.ts\\"\\n                            serverId=\\"typeScriptLanguageServerId\\"\\n                            languageId=\\"typescript\\"/>\\n\\n</extensions>\\n```\\n\\nThe `com.yourplugin.lsp.TypeScriptLanguageServerFactory` factory class looks like this:\\n\\n```java\\npackage com.yourplugin.lsp;\\n\\nimport com.intellij.openapi.project.Project;\\nimport com.redhat.devtools.lsp4ij.LanguageServerFactory;\\nimport com.redhat.devtools.lsp4ij.client.LanguageClientImpl;\\nimport com.redhat.devtools.lsp4ij.server.StreamConnectionProvider;\\nimport org.jetbrains.annotations.NotNull;\\n\\npublic class TypeScriptLanguageServerFactory implements LanguageServerFactory {\\n\\n    @Override\\n    public @NotNull StreamConnectionProvider createConnectionProvider(@NotNull Project project) {\\n        return new TypeScriptLanguageServer(project);\\n    }\\n\\n}\\n```\\n\\n```java\\npackage com.yourplugin.lsp;\\n\\nimport com.redhat.devtools.lsp4ij.server.ProcessStreamConnectionProvider;\\n\\nimport java.util.List;\\n\\npublic class TypeScriptLanguageServer extends ProcessStreamConnectionProvider {\\n\\n    public MyLanguageServer() {\\n        List<String> commands = List.of(\\"typescript-language-server\\", \\"--stdio\\");\\n        super.setCommands(commands);\\n    }\\n}\\n```\\n\\nThis code assumes `typescript-language-server` is available on the PATH, but it could be improved to target an embedded TypeScript language server inside your IntelliJ plugin.\\n\\n## Conclusion\\n\\nThis article only scratches the surface of what `LSP4IJ` provides. You can find more documentation in:\\n\\n * [the user guide](https://github.com/redhat-developer/lsp4ij/tree/main/docs/UserGuide.md), describing how to use the LSP consoles view and Language Server preferences.\\n * [the LSP Support overview](https://github.com/redhat-developer/lsp4ij/tree/main/docs/LSPSupport.md), detailing which LSP features are implemented, and how.\\n * [the User-defined language server documentation](https://github.com/redhat-developer/lsp4ij/tree/main/docs/UserDefinedLanguageServer.md), explaining how to integrate a language server in LSP4IJ with minimal settings. \\n * [the developer guide](https://github.com/redhat-developer/lsp4ij/tree/main/docs/DeveloperGuide.md), providing step-by-step instructions on how to integrate a language server in LSP4IJ in an external IntelliJ plugin.\\n\\nCreating a new LSP client for JetBrains-based IDEs has been a very humbling and rewarding experience. With each new language server we tested, we found slightly different behaviors to account for, eventually making LSP4IJ more and more robust. \\nThe initial feedback from the community has been very encouraging so far. We hope you will find LSP4IJ useful!\\n\\nIf you find any bugs or can think of ideas for some great new features, please don\u2019t hesitate to head over to our Github repository and [open a ticket](https://github.com/redhat-developer/lsp4ij/issues). Since our test framework is built around [LSP requests](https://github.com/redhat-developer/lsp4ij/blob/main/src/test/java/com/redhat/devtools/lsp4ij/features/completion/GoCompletionTest.java), you just need to copy traces from the LSP Consoles view so we can reproduce issues you find with your language server and fix them."},{"id":"k8s-create-unprivileged-user","metadata":{"permalink":"/blog/k8s-create-unprivileged-user","source":"@site/blog/2024-05-17-k8s-create-unpriviledged-user.md","title":"Create a Test Kubernetes Cluster With an Unprivileged User","description":"Motivation","date":"2024-05-17T00:00:00.000Z","tags":[{"label":"kubernetes","permalink":"/blog/tags/kubernetes"}],"readingTime":4.21,"hasTruncateMarker":false,"authors":[{"name":"David Thompson","title":"Software Developer @ Red Hat","url":"https://github.com/datho7561","imageURL":"https://github.com/datho7561.png","key":"datho7561"}],"frontMatter":{"slug":"k8s-create-unprivileged-user","title":"Create a Test Kubernetes Cluster With an Unprivileged User","authors":["datho7561"],"tags":["kubernetes"]},"unlisted":false,"prevItem":{"title":"Meet LSP4IJ, a new LSP Client for JetBrains-based IDEs","permalink":"/blog/lsp4ij-announcement"}},"content":"## Motivation\\n\\nYou are working on a software tool that interacts with Kubernetes clusters.\\nYou would like to troubleshoot bugs arising due to insufficient permissions\\nby simulating an environment where the user has heavily restricted permissions on the cluster.\\n\\n## Prerequisites\\n\\n- This tutorial assumes you are using Linux or macOS. The same general steps should work on Windows, except the paths and commands might be slightly different.\\n- Install [kind](https://kind.sigs.k8s.io/docs/user/quick-start/), needed to create the cluster.\\n- *(Optional)* install [kubectx](https://github.com/ahmetb/kubectx#installation), helpful for switching Kubernetes contexts.\\n\\n:::note\\nIf you don\'t install `kubectx`,\\nyou can change Kubernetes contexts by opening `~/.kube/config`,\\nand modifying the value of `current-context` to the name of the context you want to work with.\\nHowever, I find that it\'s much faster to use `kubectx`.\\nThe tutorial is written assuming you have installed `kubectx`.\\n:::\\n\\n## Steps\\n\\n### Creating the Cluster\\n\\nFirst, create the `kind` cluster:\\n\\n```bash\\nkind create cluster\\n```\\n\\nThis should take around a minute.\\n\\n### Creating the Service Account\\n\\nOnce the cluster is up and running, create a service account:\\n\\n```bash\\nkubectl create serviceaccount my-service-account\\n```\\n\\nAnd create a token associated with the service account:\\n\\n```bash\\nkubectl create token my-service-account --duration 72h\\n```\\n\\nThis second command will output the token into the console.\\nMake sure to copy this token into your clipboard.\\n\\nOpen up your kube config (`~/.kube/config`), and create a new user entry in the `users` section:\\n\\n\\n```diff\\n users:\\n+- name: my-service-account\\n+  user:\\n+    token: # PASTE TOKEN HERE AND REMOVE NEWLINES\\n - name: kind-kind\\n   user:\\n```\\n\\n:::warning\\nMake sure to add the token into the user entry and remove any newlines that are placed in the middle of the token,\\notherwise you will be unable to use the service account\\n:::\\n\\nThen, go up to the `contexts` section, and add the following new context:\\n\\n```diff\\n contexts:\\n - context:\\n     cluster: kind-kind\\n     namespace: default\\n     user: kind-kind\\n   name: kind-kind\\n+- context:\\n+    cluster: kind-kind\\n+    namespace: default\\n+    user: my-service-account\\n+  name: my-service-account-ctx\\n current-context: kind-kind\\n kind: Config\\n```\\n\\n### Creating the Role and Role Binding\\n\\nNext, create the following file, `service-account-permissions.yaml`:\\n\\n```yaml\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: ClusterRole\\nmetadata:\\n  name: can-list-pod\\nrules:\\n  - apiGroups: [\\"\\"]\\n    resources: [\\"pods\\"]\\n    verbs: [\\"get\\", \\"list\\", \\"watch\\"]\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: ClusterRoleBinding\\nmetadata:\\n  name: can-list-pod-binding\\nsubjects:\\n- kind: User\\n  name: system:serviceaccount:default:my-service-account\\n  apiGroup: rbac.authorization.k8s.io\\nroleRef:\\n  kind: ClusterRole\\n  name: can-list-pod\\n  apiGroup: rbac.authorization.k8s.io\\n```\\n\\nThen, apply this YAML to the cluster using the following command:\\n\\n```yaml\\nkubectl create -f service-account-permissions.yaml\\n```\\n\\nThis creates a [`ClusterRole`](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole),\\nwhich is a set of actions that an account is allowed to perform across all namespaces in a cluster.\\nThe `ClusterRole` is called `\\"can-list-pod\\"`, and it allows the user to list pods in all namespaces.\\nThe YAML file also creates a [`ClusterRoleBinding`](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding),\\nwhich specifies that `\\"my-service-account\\"`, the service account we just created,\\nshould have the `ClusterRole` `\\"can-list-pod\\"`.\\n\\nNext, we need to switch to the newly created service account.\\nTo do this, run `kubectx my-service-account-ctx` to switch to the context that we created by editing `~/.kube/config`.\\n\\n### Testing the account\\n\\nIn order to test that the account was created successfully,\\ntry listing the namespaces on the cluster:\\n\\n```bash\\nkubectl get namespace\\n```\\n\\nYou should get an \\"unauthorized\\" warning,\\nbecause the only thing the service account is allowed to do on the cluster is list pods.\\n\\nNext, let\'s verify that you can list pods.\\nWe should create a pod on the cluster so that there is something to list.\\nUse `kubectx kind-kind` to switch back to the `kind-kind` context,\\nso that you have permissions to create pods.\\n\\nThen, run:\\n\\n```bash\\nkubectl create deployment --image quay.io/davthomp/pet-alpine my-deployment\\n```\\n\\nThis creates a deployment, which will automatically create and manage a pod.\\n\\n:::info[About the container image]\\nThe container image that\'s being run is from my Quay repository.\\nIt runs a \\"Hello World\\" webapp written in Go,\\ni.e. it serves the text \\"hello\\" over HTTP on port 8080 at the endpoint `/hello`.\\nIt uses Alpine Linux as the base image.\\n:::\\n\\nThen, switch back to the `my-service-account-ctx` context using `kubectx my-service-account-ctx`,\\nand then try to list the pods:\\n\\n```bash\\nkubectl get pods\\n```\\n\\nYou should see one pod that\'s listed: the pod managed by the deployment we created.\\n\\n### Next Steps\\n\\nYou\'ve successfully set up a service account with heavily restricted access to the cluster.\\n\\nIf you want to give the service account more permissions, you can modify and reapply `service-account-permissions.yaml`.\\nYou will need to switch back to the `kind-kind` user in order to reapply the changes.\\nRefer to [the Kubernetes documentation on role-based access control](https://kubernetes.io/docs/reference/access-authn-authz/rbac/)\\nfor more information on setting up the permissions for the account.\\n\\n### Cleaning Up\\n\\nOnce you are done with the cluster,\\nmake sure to delete it.\\nAlso, make sure to remove the new user and context that you created from your `~/.kube/config`,\\nsince they will no longer exist when you delete the cluster.\\n\\n:::info[Check out our developer tools]\\nIf you liked this blog post,\\nmake sure to check out [VS Code OpenShift Toolkit](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector)\\nor [Intellij OpenShift Toolkit](https://plugins.jetbrains.com/plugin/12030-openshift-toolkit-by-red-hat),\\nwhich enable you to interact with your Kubernetes or OpenShift cluster right from your IDE.\\n:::"}]}')}}]);